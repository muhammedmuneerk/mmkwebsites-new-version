// Projects data
const projects = [
  {
    name: "AMOR WEDDINGS",
    description: `A business portfolio for a men's clothing brand. This website includes an advanced gallery`,
    image: "images/collage-amorweddings-3.png",
    technologies: ["HTML", "CSS", "Javascript"],
    github: "https://github.com/muneer2005/amorweddings",
    live: "https://amorweddings.onrender.com",
  },
  {
    name: "Shazzz",
    description: "A static personal portfolio website showcasing the experiences and establishments of Shazzz.",
    image: "images/collage-shazzz-2.png",
    technologies: ["HTML", "CSS", "JavaScript"],
    github: "https://github.com/yourusername/shazzz",
    live: "https://shazzz.onrender.com",
  },
  {
    name: "Spicenza",
    description: `A spices import & export company website design. This website includes an advanced dark-mode and light-mode option.`,
    image: "images/spicenza-2.png",
    technologies: ["HTML", "CSS", "Javascript"],
    github: "https://github.com/muhammedmuneerk/Spicenza",
    live: "https://spicenza.vercel.app",
  },
  {
    name: "Artisan Creations",
    description: `An art & craft business portfolio website design. This website includes images generated by ai.`,
    image: "images/artisancreations-2.png",
    technologies: ["HTML", "CSS", "Javascript"],
    github: "https://github.com/muhammedmuneerk/artisancreations",
    live: "https://artisancreations.vercel.app",
  },
  {
    name: "MMKflix",
    description: "A Netflix clone built with React and TMDB API integration.",
    image: "images/collage-mmkflix-1.png",
    technologies: ["React", "Node.js", "CSS", "TMDB API"],
    github: "https://github.com/yourusername/netflix-clone",
    live: "https://mmkflix.vercel.app",
  },
  {
    name: "ToDo App",
    description: "A modern todolist application.",
    image: "images/screencapture-mmk-todoapp-vercel-app-2024-10-24-06_39_05.png",
    technologies: ["React", "CSS"],
    github: "https://github.com/muhammedmuneerk/mmk-todoapp",
    live: "https://mmk-todoapp.vercel.app",
  },
  {
    name: "Airbnb Clone",
    description: "A full-stack Airbnb clone with modern UI and cloud image storage.",
    image: "images/collage-airbnb.png",
    technologies: ["MongoDB", "Express", "React", "Node.js", "Tailwind CSS", "Cloudinary"],
    github: "https://github.com/yourusername/airbnb-clone",
    live: "https://mmbnb.vercel.app",
  },
]

// Initialize portfolio section
document.addEventListener("DOMContentLoaded", () => {
  // Add the portfolio styles to the head
  const portfolioStyles = document.createElement("link")
  portfolioStyles.rel = "stylesheet"
  portfolioStyles.href = "portfolio-styles.css"
  document.head.appendChild(portfolioStyles)

  // Initialize portfolio grid
  initPortfolio()

  // Initialize portfolio filter
  initPortfolioFilter()
})

// Initialize portfolio grid with projects
function initPortfolio() {
  const portfolioGrid = document.getElementById("portfolio-grid")

  if (!portfolioGrid) return

  // Clear existing content
  portfolioGrid.innerHTML = ""

  // Add project cards
  projects.forEach((project) => {
    // Determine category for filtering
    let category = ""
    if (project.technologies.includes("React")) {
      category = "React"
    } else if (
      project.technologies.includes("MongoDB") ||
      project.technologies.includes("Express") ||
      project.technologies.includes("Node.js")
    ) {
      category = "Full-Stack"
    } else {
      category = "HTML"
    }

    // Create project card
    const projectCard = `
            <div class="portfolio-item" data-category="${category}">
                <div class="portfolio-img">
                    <img src="${project.image}" alt="${project.name}">
                </div>
                <div class="portfolio-content">
                    <h3>${project.name}</h3>
                    <p>${project.description}</p>
                    <div class="portfolio-tech">
                        ${project.technologies.map((tech) => `<span class="tech-tag">${tech}</span>`).join("")}
                    </div>
                    <div class="portfolio-links">
                        <a href="${project.live}" class="portfolio-link" target="_blank">
                            <svg viewBox="0 0 24 24" width="16" height="16">
                                <path d="M19 19H5V5h7V3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/>
                            </svg>
                            Live Demo
                        </a>
                        <a href="${project.github}" class="portfolio-link github" target="_blank">
                            <svg viewBox="0 0 24 24" width="16" height="16">
                                <path d="M12 0a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2.2c-3.3.7-4-1.4-4-1.4-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.4 1 .1-.8.4-1.3.8-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.1-.4-.6-1.6.1-3.2 0 0 1-.3 3.3 1.2a11.5 11.5 0 0 1 6 0C17.3 4.7 18.3 5 18.3 5c.7 1.6.2 2.9.1 3.2.8.8 1.3 1.9 1.3 3.2 0 4.6-2.9 5.6-5.5 5.9.4.4.8 1.1.8 2.2v3.3c0 .3.2.7.8.6A12 12 0 0 0 12 0z"/>
                            </svg>
                            GitHub
                        </a>
                    </div>
                </div>
            </div>
        `

    portfolioGrid.innerHTML += projectCard
  })
}

// Initialize portfolio filter
function initPortfolioFilter() {
  const filterButtons = document.querySelectorAll(".filter-btn")
  const portfolioItems = document.querySelectorAll(".portfolio-item")

  if (filterButtons.length === 0 || portfolioItems.length === 0) return

  filterButtons.forEach((button) => {
    button.addEventListener("click", () => {
      // Update active button
      filterButtons.forEach((btn) => btn.classList.remove("active"))
      button.classList.add("active")

      const filterValue = button.getAttribute("data-filter")

      // Filter items
      portfolioItems.forEach((item) => {
        if (filterValue === "all" || item.getAttribute("data-category") === filterValue) {
          item.classList.remove("hidden")
        } else {
          item.classList.add("hidden")
        }
      })
    })
  })
}

